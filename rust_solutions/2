use std::{cmp::max, cmp::min, collections::{HashMap, HashSet}};

pub fn solve_a(input: &Vec<String>, debug: bool) -> i32 {
    // Scan each set of frequencies into a hashmap containing frequency then location
    // Iterate over each unique pair of antenna for each given frequency
    // Add locations to a hashset
    let mut position_by_frequency: HashMap<char, Vec<(usize, usize)>> = HashMap::new();
    for (row, line) in input.iter().enumerate() {
        for (col, c) in line.char_indices() {
            if c != '.' {
                if let Some(count) = position_by_frequency.get_mut(&c) {
                    count.push((row, col));
                } else { position_by_frequency.insert(c, vec![(row, col)]); }
            }
        }
    }

    let mut antinodes: HashSet<(usize, usize)> = HashSet::new();

    for freq in position_by_frequency.keys() {
        let locations: Vec<(usize, usize)> = position_by_frequency.get(freq).unwrap().to_vec();
        for outer in 0..locations.len() {
            for inner in outer+1..locations.len() {
                if debug { println!("Comparing {outer} to {inner}"); }
                let dx = locations[outer].0 as i32 - locations[inner].0 as i32;
                let dy = locations[outer].1 as i32 - locations[inner].1 as i32;
                let max = max(locations[outer].1, locations[inner].1);
                let min = min(locations[outer].1, locations[inner].1);
                if locations[outer].0 >= dx as i32 && min >= dy {
                    let an = (locations[outer].0 - dx, min - dy);
                    if debug { println!("{an:?}"); }
                    antinodes.insert(an);
                }
                if locations[inner].0 + dx < input.len() && max + dy < input[0].len() {
                    let an = (locations[inner].0 + dx, max + dy);
                    if debug { println!("{an:?}"); }
                    antinodes.insert(an);
                }
            }
        }
    }

    if debug {
        let mut grid: Vec<Vec<char>> = vec![vec!['.'; input[0].len()]; input.len()];
        for coord in antinodes.iter() {
            grid[coord.0][coord.1] = '#';
        }
        for a in position_by_frequency {
            for pos in a.1 {
                grid[pos.0][pos.1] = a.0;
            }
        }
        for line in grid {
            println!("{}", line.iter().collect::<String>());
        }
    }

    antinodes.len() as i32
}

pub fn solve_b(input: &Vec<String>, debug: bool) -> i32 {
    return 0i32;
}
        
